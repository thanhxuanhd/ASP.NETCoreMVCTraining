@using ASPNETCoreMVCTraining.ViewModels
@using ASPNETCoreMVCTraining.Interfaces;
@inject IPageService PageService;
@model PageInfo

<div class="row align-items-start justify-between border-t border-gray-200 sm:px-6 rounded-md mt-2">
    <div class="col">
        <p class="text-sm text-gray-700">
            Showing
            <span class="font-medium">@(((Model.PageIndex - 1) * Model.PageSize) + 1)</span>
            to
            <span class="font-medium">@(Model.PageIndex * Model.PageSize)</span>
            of
            <span class="font-medium">@Model.TotalRecords</span>
            results
        </p>
    </div>
    <nav class="col" aria-label="Page navigation">
        <ul class="pagination float-end">
            @if (Model.PageIndex == 1)
            {
                <li class="page-item disabled">
                    <a class="bg-gray-200 page-link" href="#">Previous</a>
                </li>
            }
            else
            {
                <li class="page-item">
                    @{
                        var hasFirstPageParams = PageService.GetPageParams(1, Model);
                    }
                    @Html.ActionLink($"Previous", Model.Action, Model.Controller, hasFirstPageParams, new { @class = "pager-btn items-center text-sm font-medium page-link" })
                </li>
            }

            @if (Model.HasPreviousPage)
            {
                <li class="page-item">
                    @{
                        var hasPreviousParams = PageService.GetPageParams(Model.PageIndex - 1, Model);
                    }
                    @Html.ActionLink($"{Model.PageIndex - 1}", Model.Action, Model.Controller, hasPreviousParams, new { @class = "pager-btn items-center text-sm font-medium page-link" })
                </li>
            }

            <li class="page-item disabled">
                <span class="items-center text-sm font-medium page-link">
                    @Model.PageIndex
                </span>
            </li>

            @if (Model.HasNextPage)
            {
                <li class="page-item">
                    @{
                        var hasNextPageParams = PageService.GetPageParams(Model.PageIndex + 1, Model);
                    }
                    @Html.ActionLink($"{Model.PageIndex + 1}", Model.Action, Model.Controller, hasNextPageParams, new { @class = "pager-btn items-center text-sm font-medium page-link" })
                </li>
            }

            @if (Model.PageIndex == Model.TotalPages)
            {
                <li class="page-item disabled">
                    <a class="bg-gray-200 page-link" href="#">Next</a>
                </li>
            }
            else
            {
                <li class="page-item">
                    @{
                        var endParams = PageService.GetPageParams(Model.TotalPages, Model);
                    }
                    @Html.ActionLink("Next", Model.Action, Model.Controller, endParams, new { @class = "pager-btn items-center text-sm font-medium page-link" })
                </li>
            }
        </ul>
    </nav>
</div>
